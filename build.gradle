buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = project.mod_version
group = project.maven_group

minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                grounded_origins {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                grounded_origins {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'grounded_origins', '--all', '--existing', file('src/main/resources/')

            mods {
                grounded_origins {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
    }
}

/* https://www.cursemaven.com/ curse project dependency stuff
The dependency format is as follows: curse.maven:<descriptor>-<projectid>:<fileid>
aka 'curse.maven:descriptor-projectid:fileid'

    curse.maven -> Required. Marks the dependency to be resolved by the curse maven website.

    <descriptor> -> Can be anything you want. This file downloaded will have this in it's name, so it's good to use this to show which files are what. A good practice would be to have this as the project slug.

    <projectid> -> The project id of the file you want to add as a dependency.

    <fileid> -> The file id of the file you want to add as a dependency.
*/
dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${minecraft_version}-${forge_version}"
    runtimeOnly fg.deobf('curse.maven:origins-474438:3426062')
    runtimeOnly fg.deobf('curse.maven:ope-524997:3517860')
    runtimeOnly fg.deobf('curse.maven:pehkui-319596:3577077')
    runtimeOnly fg.deobf('curse.maven:clothconfig-348521:3559634')
    runtimeOnly fg.deobf('curse.maven:architectury-419699:3587404')
    runtimeOnly fg.deobf('curse.maven:caelus-308989:3522094')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "mo_shark",
            "Specification-Version": '1.0',
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"mo_shark",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

